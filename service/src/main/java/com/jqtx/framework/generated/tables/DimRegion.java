/*
 * This file is generated by jOOQ.
 */
package com.jqtx.framework.generated.tables;


import com.jqtx.framework.generated.Keys;
import com.jqtx.framework.generated.Toolkit;
import com.jqtx.framework.generated.tables.records.DimRegionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DimRegion extends TableImpl<DimRegionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>toolkit.dim_region</code>
     */
    public static final DimRegion DIM_REGION = new DimRegion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DimRegionRecord> getRecordType() {
        return DimRegionRecord.class;
    }

    /**
     * The column <code>toolkit.dim_region.id</code>.
     */
    public final TableField<DimRegionRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>toolkit.dim_region.lv0_code</code>.
     */
    public final TableField<DimRegionRecord, String> LV0_CODE = createField(DSL.name("lv0_code"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>toolkit.dim_region.lv0_name</code>.
     */
    public final TableField<DimRegionRecord, String> LV0_NAME = createField(DSL.name("lv0_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>toolkit.dim_region.lv1_code</code>.
     */
    public final TableField<DimRegionRecord, String> LV1_CODE = createField(DSL.name("lv1_code"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>toolkit.dim_region.lv1_name</code>.
     */
    public final TableField<DimRegionRecord, String> LV1_NAME = createField(DSL.name("lv1_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>toolkit.dim_region.lv2_code</code>.
     */
    public final TableField<DimRegionRecord, String> LV2_CODE = createField(DSL.name("lv2_code"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>toolkit.dim_region.lv2_name</code>.
     */
    public final TableField<DimRegionRecord, String> LV2_NAME = createField(DSL.name("lv2_name"), SQLDataType.VARCHAR(255), this, "");

    private DimRegion(Name alias, Table<DimRegionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DimRegion(Name alias, Table<DimRegionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>toolkit.dim_region</code> table reference
     */
    public DimRegion(String alias) {
        this(DSL.name(alias), DIM_REGION);
    }

    /**
     * Create an aliased <code>toolkit.dim_region</code> table reference
     */
    public DimRegion(Name alias) {
        this(alias, DIM_REGION);
    }

    /**
     * Create a <code>toolkit.dim_region</code> table reference
     */
    public DimRegion() {
        this(DSL.name("dim_region"), null);
    }

    public <O extends Record> DimRegion(Table<O> child, ForeignKey<O, DimRegionRecord> key) {
        super(child, key, DIM_REGION);
    }

    @Override
    public Schema getSchema() {
        return Toolkit.TOOLKIT;
    }

    @Override
    public Identity<DimRegionRecord, UInteger> getIdentity() {
        return (Identity<DimRegionRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<DimRegionRecord> getPrimaryKey() {
        return Keys.KEY_DIM_REGION_PRIMARY;
    }

    @Override
    public List<UniqueKey<DimRegionRecord>> getKeys() {
        return Arrays.<UniqueKey<DimRegionRecord>>asList(Keys.KEY_DIM_REGION_PRIMARY);
    }

    @Override
    public DimRegion as(String alias) {
        return new DimRegion(DSL.name(alias), this);
    }

    @Override
    public DimRegion as(Name alias) {
        return new DimRegion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DimRegion rename(String name) {
        return new DimRegion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DimRegion rename(Name name) {
        return new DimRegion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UInteger, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
