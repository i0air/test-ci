/*
 * This file is generated by jOOQ.
 */
package com.jqtx.framework.generated.tables;


import com.jqtx.framework.generated.tables.records.CustomTableFieldRecord;
import com.jqtx.framework.generated.Keys;
import com.jqtx.framework.generated.Toolkit;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 自定义表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomTableField extends TableImpl<CustomTableFieldRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>toolkit.custom_table_field</code>
     */
    public static final CustomTableField CUSTOM_TABLE_FIELD = new CustomTableField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomTableFieldRecord> getRecordType() {
        return CustomTableFieldRecord.class;
    }

    /**
     * The column <code>toolkit.custom_table_field.ID</code>.
     */
    public final TableField<CustomTableFieldRecord, UInteger> ID = createField(DSL.name("ID"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>toolkit.custom_table_field.PID</code>. 上级字典ID，默认0
     */
    public final TableField<CustomTableFieldRecord, UInteger> PID = createField(DSL.name("PID"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "上级字典ID，默认0");

    /**
     * The column <code>toolkit.custom_table_field.TABLE_NAME</code>. 字段所属表
     */
    public final TableField<CustomTableFieldRecord, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(50).nullable(false), this, "字段所属表");

    /**
     * The column <code>toolkit.custom_table_field.GROUP</code>. 字段分组
     */
    public final TableField<CustomTableFieldRecord, String> GROUP = createField(DSL.name("GROUP"), SQLDataType.VARCHAR(50), this, "字段分组");

    /**
     * The column <code>toolkit.custom_table_field.TABLE_FIELD</code>. key（）
     */
    public final TableField<CustomTableFieldRecord, String> TABLE_FIELD = createField(DSL.name("TABLE_FIELD"), SQLDataType.VARCHAR(255).nullable(false), this, "key（）");

    /**
     * The column <code>toolkit.custom_table_field.FIELD_NAME</code>. 字典名称（中文名称）
     */
    public final TableField<CustomTableFieldRecord, String> FIELD_NAME = createField(DSL.name("FIELD_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "字典名称（中文名称）");

    /**
     * The column <code>toolkit.custom_table_field.DATA_TYPE</code>. 字段类型（1.int,2.double,3.time,4.string,5.IP类型）
     */
    public final TableField<CustomTableFieldRecord, Integer> DATA_TYPE = createField(DSL.name("DATA_TYPE"), SQLDataType.INTEGER.nullable(false), this, "字段类型（1.int,2.double,3.time,4.string,5.IP类型）");

    /**
     * The column <code>toolkit.custom_table_field.INPUT_TYPE</code>. 输入方式（1.文本输入,2.下拉选择）
     */
    public final TableField<CustomTableFieldRecord, Integer> INPUT_TYPE = createField(DSL.name("INPUT_TYPE"), SQLDataType.INTEGER.nullable(false), this, "输入方式（1.文本输入,2.下拉选择）");

    /**
     * The column <code>toolkit.custom_table_field.RANGE</code>. 值范围,如1-100，(a,b,c)
     */
    public final TableField<CustomTableFieldRecord, String> RANGE = createField(DSL.name("RANGE"), SQLDataType.CLOB.nullable(false), this, "值范围,如1-100，(a,b,c)");

    /**
     * The column <code>toolkit.custom_table_field.LENGTH</code>. 数据长度
     */
    public final TableField<CustomTableFieldRecord, Integer> LENGTH = createField(DSL.name("LENGTH"), SQLDataType.INTEGER, this, "数据长度");

    /**
     * The column <code>toolkit.custom_table_field.NULLABLE</code>. 是否允许空
     */
    public final TableField<CustomTableFieldRecord, Boolean> NULLABLE = createField(DSL.name("NULLABLE"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'1'", SQLDataType.BIT)), this, "是否允许空");

    /**
     * The column <code>toolkit.custom_table_field.COMMENT</code>. 字段备注
     */
    public final TableField<CustomTableFieldRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "字段备注");

    /**
     * The column <code>toolkit.custom_table_field.EDITABLE</code>. 是否可以修改
     */
    public final TableField<CustomTableFieldRecord, Boolean> EDITABLE = createField(DSL.name("EDITABLE"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'1'", SQLDataType.BIT)), this, "是否可以修改");

    /**
     * The column <code>toolkit.custom_table_field.SEQ</code>. 序号
     */
    public final TableField<CustomTableFieldRecord, Integer> SEQ = createField(DSL.name("SEQ"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "序号");

    /**
     * The column <code>toolkit.custom_table_field.SHOW_FORM</code>. 是否在表单中显示
     */
    public final TableField<CustomTableFieldRecord, Boolean> SHOW_FORM = createField(DSL.name("SHOW_FORM"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'1'", SQLDataType.BIT)), this, "是否在表单中显示");

    /**
     * The column <code>toolkit.custom_table_field.SHOW_LIST</code>. 是否在列表中显示
     */
    public final TableField<CustomTableFieldRecord, Boolean> SHOW_LIST = createField(DSL.name("SHOW_LIST"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'1'", SQLDataType.BIT)), this, "是否在列表中显示");

    /**
     * The column <code>toolkit.custom_table_field.ON_NOT_NULL</code>. 值不为空时需要强制输入的字段及值
     */
    public final TableField<CustomTableFieldRecord, String> ON_NOT_NULL = createField(DSL.name("ON_NOT_NULL"), SQLDataType.CLOB.nullable(false), this, "值不为空时需要强制输入的字段及值");

    /**
     * The column <code>toolkit.custom_table_field.ON_VALUE_EQUAL</code>. 当值为指定值时需要强制输入的字段及值
     */
    public final TableField<CustomTableFieldRecord, String> ON_VALUE_EQUAL = createField(DSL.name("ON_VALUE_EQUAL"), SQLDataType.CLOB.nullable(false), this, "当值为指定值时需要强制输入的字段及值");

    /**
     * The column <code>toolkit.custom_table_field.UNIQUE</code>.
     */
    public final TableField<CustomTableFieldRecord, Boolean> UNIQUE = createField(DSL.name("UNIQUE"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "");

    /**
     * The column <code>toolkit.custom_table_field.LINK_TABLE</code>. 关联表
     */
    public final TableField<CustomTableFieldRecord, String> LINK_TABLE = createField(DSL.name("LINK_TABLE"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "关联表");

    /**
     * The column <code>toolkit.custom_table_field.LINK_FIELD</code>. 关联字段
     */
    public final TableField<CustomTableFieldRecord, String> LINK_FIELD = createField(DSL.name("LINK_FIELD"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "关联字段");

    /**
     * The column <code>toolkit.custom_table_field.LINK_SHOW_FIELD</code>. 关联显示字段
     */
    public final TableField<CustomTableFieldRecord, String> LINK_SHOW_FIELD = createField(DSL.name("LINK_SHOW_FIELD"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "关联显示字段");

    private CustomTableField(Name alias, Table<CustomTableFieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomTableField(Name alias, Table<CustomTableFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("自定义表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>toolkit.custom_table_field</code> table reference
     */
    public CustomTableField(String alias) {
        this(DSL.name(alias), CUSTOM_TABLE_FIELD);
    }

    /**
     * Create an aliased <code>toolkit.custom_table_field</code> table reference
     */
    public CustomTableField(Name alias) {
        this(alias, CUSTOM_TABLE_FIELD);
    }

    /**
     * Create a <code>toolkit.custom_table_field</code> table reference
     */
    public CustomTableField() {
        this(DSL.name("custom_table_field"), null);
    }

    public <O extends Record> CustomTableField(Table<O> child, ForeignKey<O, CustomTableFieldRecord> key) {
        super(child, key, CUSTOM_TABLE_FIELD);
    }

    @Override
    public Schema getSchema() {
        return Toolkit.TOOLKIT;
    }

    @Override
    public Identity<CustomTableFieldRecord, UInteger> getIdentity() {
        return (Identity<CustomTableFieldRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<CustomTableFieldRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOM_TABLE_FIELD_PRIMARY;
    }

    @Override
    public List<UniqueKey<CustomTableFieldRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomTableFieldRecord>>asList(Keys.KEY_CUSTOM_TABLE_FIELD_PRIMARY);
    }

    @Override
    public CustomTableField as(String alias) {
        return new CustomTableField(DSL.name(alias), this);
    }

    @Override
    public CustomTableField as(Name alias) {
        return new CustomTableField(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomTableField rename(String name) {
        return new CustomTableField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomTableField rename(Name name) {
        return new CustomTableField(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<UInteger, UInteger, String, String, String, String, Integer, Integer, String, Integer, Boolean, String, Boolean, Integer, Boolean, Boolean, String, String, Boolean, String, String, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
